import { MigrationInterface, QueryRunner } from "typeorm";

export class migration1697710857953 implements MigrationInterface {
    name = 'migration1697710857953'

    public async up(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`CREATE TABLE "feature_group" ("feature_group_id" SERIAL NOT NULL, "feature_group_name" character varying(100) NOT NULL, "createdby" integer NOT NULL, "createddate" TIMESTAMP NOT NULL, "modifiedby" integer, "modifieddate" TIMESTAMP, CONSTRAINT "UQ_4e543715735568012740d8b1a5e" UNIQUE ("feature_group_id"), CONSTRAINT "UQ_a867c6352cbea4809c8654f54c7" UNIQUE ("feature_group_name"), CONSTRAINT "PK_4e543715735568012740d8b1a5e" PRIMARY KEY ("feature_group_id")); COMMENT ON COLUMN "feature_group"."feature_group_id" IS 'PK of the table.'; COMMENT ON COLUMN "feature_group"."feature_group_name" IS 'Name of the feature group.'; COMMENT ON COLUMN "feature_group"."createdby" IS 'User id of a user who created the record.'; COMMENT ON COLUMN "feature_group"."createddate" IS 'Date and time when the record is created.'; COMMENT ON COLUMN "feature_group"."modifiedby" IS 'User id of a user who modified the record.'; COMMENT ON COLUMN "feature_group"."modifieddate" IS 'Date and time when the record is modified.'`);
        await queryRunner.query(`CREATE TABLE "feature" ("feature_id" SERIAL NOT NULL, "feature_group_id" integer NOT NULL, "code" character varying(50) NOT NULL, "feature_name" character varying(100) NOT NULL, "remarks" character varying, "featureimage" character varying(500), "createdby" integer NOT NULL, "createddate" TIMESTAMP NOT NULL, "modifiedby" integer, "modifieddate" TIMESTAMP, CONSTRAINT "UQ_1e43309a0b5bc1a46be4662a655" UNIQUE ("feature_id"), CONSTRAINT "UQ_c30465b5a6e0fae1c8ee7e3120e" UNIQUE ("code"), CONSTRAINT "UQ_b940d32bce4a451ffd433ab9959" UNIQUE ("feature_name"), CONSTRAINT "PK_1e43309a0b5bc1a46be4662a655" PRIMARY KEY ("feature_id")); COMMENT ON COLUMN "feature"."feature_id" IS 'PK of the table.'; COMMENT ON COLUMN "feature"."feature_group_id" IS 'FK of the table.'; COMMENT ON COLUMN "feature"."code" IS 'Unique code of the feature.'; COMMENT ON COLUMN "feature"."feature_name" IS 'Name of the feature.'; COMMENT ON COLUMN "feature"."remarks" IS 'Name of the feature.'; COMMENT ON COLUMN "feature"."featureimage" IS 'Feature image path.'; COMMENT ON COLUMN "feature"."createdby" IS 'User id of a user who created the record.'; COMMENT ON COLUMN "feature"."createddate" IS 'Date and time when the record is created.'; COMMENT ON COLUMN "feature"."modifiedby" IS 'User id of a user who modified the record.'; COMMENT ON COLUMN "feature"."modifieddate" IS 'Date and time when the record is modified.'`);
        await queryRunner.query(`CREATE TABLE "item_category" ("item_category_id" SERIAL NOT NULL, "code" character varying(50) NOT NULL, "item_category_name" character varying(100) NOT NULL, "remarks" character varying(8000), "createdby" integer NOT NULL, "createddate" TIMESTAMP NOT NULL, "modifiedby" integer, "modifieddate" TIMESTAMP, "issystem" boolean NOT NULL, CONSTRAINT "UQ_7173efc7a9b80590cd4f5a00264" UNIQUE ("item_category_id"), CONSTRAINT "UQ_d07bbc72c8822787efab782a6c5" UNIQUE ("code"), CONSTRAINT "PK_7173efc7a9b80590cd4f5a00264" PRIMARY KEY ("item_category_id")); COMMENT ON COLUMN "item_category"."item_category_id" IS 'PK of the table.'; COMMENT ON COLUMN "item_category"."code" IS 'Unique code of the item category.'; COMMENT ON COLUMN "item_category"."item_category_name" IS 'Name of the item category.'; COMMENT ON COLUMN "item_category"."remarks" IS 'Name of the item category.'; COMMENT ON COLUMN "item_category"."createdby" IS 'User id of a user who created the record.'; COMMENT ON COLUMN "item_category"."createddate" IS 'Date and time when the record is created.'; COMMENT ON COLUMN "item_category"."modifiedby" IS 'User id of a user who modified the record.'; COMMENT ON COLUMN "item_category"."modifieddate" IS 'Date and time when the record is modified.'; COMMENT ON COLUMN "item_category"."issystem" IS 'Is generated by the system.'`);
        await queryRunner.query(`CREATE TABLE "role_feature" ("role_feature_id" SERIAL NOT NULL, "role_id" smallint NOT NULL, "feature_id" integer NOT NULL, "canCreate" boolean NOT NULL, "canModify" boolean NOT NULL, "canView" boolean NOT NULL, "canDelete" boolean NOT NULL, "canManage" boolean NOT NULL, CONSTRAINT "UQ_f1b13c6087078d96bb48a7bf6ae" UNIQUE ("role_feature_id"), CONSTRAINT "PK_f1b13c6087078d96bb48a7bf6ae" PRIMARY KEY ("role_feature_id")); COMMENT ON COLUMN "role_feature"."role_feature_id" IS 'PK of the table.'; COMMENT ON COLUMN "role_feature"."role_id" IS 'FK to role table.'; COMMENT ON COLUMN "role_feature"."feature_id" IS 'FK to feature table.'; COMMENT ON COLUMN "role_feature"."canCreate" IS 'User have permission to create new record or not.'; COMMENT ON COLUMN "role_feature"."canModify" IS 'User have permission to modify an existing record or not.'; COMMENT ON COLUMN "role_feature"."canView" IS 'User have permission to view records or not.'; COMMENT ON COLUMN "role_feature"."canDelete" IS 'User have permission to delete an existing record or not.'; COMMENT ON COLUMN "role_feature"."canManage" IS 'User have permission to manage records or not.'`);
        await queryRunner.query(`CREATE TABLE "user" ("user_id" SERIAL NOT NULL, "account_id" bigint NOT NULL, "firstname" character varying(100) NOT NULL, "lastname" character varying(100) NOT NULL, "username" character varying(200) NOT NULL, "email" character varying(200) NOT NULL, "password" text NOT NULL, "isactive" boolean NOT NULL, "profileimage" character varying(500), "createdby" integer NOT NULL, "createddate" TIMESTAMP NOT NULL, "modifiedby" integer, "modifieddate" TIMESTAMP, "issystem" boolean NOT NULL, "isconfirmed" boolean NOT NULL, CONSTRAINT "UQ_758b8ce7c18b9d347461b30228d" UNIQUE ("user_id"), CONSTRAINT "UQ_78a916df40e02a9deb1c4b75edb" UNIQUE ("username"), CONSTRAINT "UQ_e12875dfb3b1d92d7d7c5377e22" UNIQUE ("email"), CONSTRAINT "PK_758b8ce7c18b9d347461b30228d" PRIMARY KEY ("user_id")); COMMENT ON COLUMN "user"."user_id" IS 'PK of the table.'; COMMENT ON COLUMN "user"."account_id" IS 'FK to account table.'; COMMENT ON COLUMN "user"."firstname" IS 'First name of the user.'; COMMENT ON COLUMN "user"."lastname" IS 'Last name of the user.'; COMMENT ON COLUMN "user"."username" IS 'Username of the user.'; COMMENT ON COLUMN "user"."email" IS 'Email address of the user.'; COMMENT ON COLUMN "user"."password" IS 'Password to login into the system.'; COMMENT ON COLUMN "user"."isactive" IS 'Is active user.'; COMMENT ON COLUMN "user"."profileimage" IS 'Profile image path.'; COMMENT ON COLUMN "user"."createdby" IS 'User id of a user who created the record.'; COMMENT ON COLUMN "user"."createddate" IS 'Date and time when the record is created.'; COMMENT ON COLUMN "user"."modifiedby" IS 'User id of a user who modified the record.'; COMMENT ON COLUMN "user"."modifieddate" IS 'Date and time when the record is modified.'; COMMENT ON COLUMN "user"."issystem" IS 'Is generated by the system.'; COMMENT ON COLUMN "user"."isconfirmed" IS 'Is confirmed / varified user (email verification).'`);
        await queryRunner.query(`CREATE TABLE "role" ("role_id" SMALLSERIAL NOT NULL, "role_name" character varying(50) NOT NULL, "createdby" integer NOT NULL, "createddate" TIMESTAMP NOT NULL, "modifiedby" integer, "modifieddate" TIMESTAMP, "issystem" boolean NOT NULL, "isDefault" boolean DEFAULT false, CONSTRAINT "UQ_df46160e6aa79943b83c81e496e" UNIQUE ("role_id"), CONSTRAINT "PK_df46160e6aa79943b83c81e496e" PRIMARY KEY ("role_id")); COMMENT ON COLUMN "role"."role_id" IS 'PK of the table.'; COMMENT ON COLUMN "role"."role_name" IS 'Name of the role.'; COMMENT ON COLUMN "role"."createdby" IS 'User id of a user who created the record.'; COMMENT ON COLUMN "role"."createddate" IS 'Date and time when the record is created.'; COMMENT ON COLUMN "role"."modifiedby" IS 'User id of a user who modified the record.'; COMMENT ON COLUMN "role"."modifieddate" IS 'Date and time when the record is modified.'; COMMENT ON COLUMN "role"."issystem" IS 'Is generated by the system.'; COMMENT ON COLUMN "role"."isDefault" IS 'Is default role or not.'`);
        await queryRunner.query(`CREATE TABLE "user_session" ("user_session_id" SERIAL NOT NULL, "user_id" integer NOT NULL, "session_id" character varying(500), "refresh_token" text, "expirytime" bigint, "device" character varying(500), "operating_system" character varying(500), "browser" character varying(500), "location" character varying(500), "ip_address" character varying(50), "loggedin_datetime" TIMESTAMP NOT NULL, CONSTRAINT "UQ_f53307a84bc385af0550f21aa9a" UNIQUE ("user_session_id"), CONSTRAINT "UQ_50c2b6e58a37166dab435111f25" UNIQUE ("session_id"), CONSTRAINT "PK_f53307a84bc385af0550f21aa9a" PRIMARY KEY ("user_session_id")); COMMENT ON COLUMN "user_session"."user_session_id" IS 'PK of the table.'; COMMENT ON COLUMN "user_session"."user_id" IS 'FK to user table.'; COMMENT ON COLUMN "user_session"."session_id" IS 'Unique session id generate by uuid.'; COMMENT ON COLUMN "user_session"."refresh_token" IS 'Refresh token.'; COMMENT ON COLUMN "user_session"."expirytime" IS 'Expiry time of the refresh token.'; COMMENT ON COLUMN "user_session"."device" IS 'Device details like manufacturar name, model name etc.'; COMMENT ON COLUMN "user_session"."operating_system" IS 'Operating system details like OS name, version etc.'; COMMENT ON COLUMN "user_session"."browser" IS 'Browser details like broeser name, version etc.'; COMMENT ON COLUMN "user_session"."location" IS 'Location details like latitude, longitude, address details etc.'; COMMENT ON COLUMN "user_session"."ip_address" IS 'IP address of the device.'; COMMENT ON COLUMN "user_session"."loggedin_datetime" IS 'Logged in date time.'`);
        await queryRunner.query(`CREATE TABLE "user_role" ("role_id" smallint NOT NULL, "user_id" integer NOT NULL, CONSTRAINT "PK_f634684acb47c1a158b83af5150" PRIMARY KEY ("role_id", "user_id"))`);
        await queryRunner.query(`CREATE INDEX "IDX_32a6fc2fcb019d8e3a8ace0f55" ON "user_role" ("role_id") `);
        await queryRunner.query(`CREATE INDEX "IDX_d0e5815877f7395a198a4cb0a4" ON "user_role" ("user_id") `);
        await queryRunner.query(`ALTER TABLE "user_role" ADD CONSTRAINT "FK_32a6fc2fcb019d8e3a8ace0f55f" FOREIGN KEY ("role_id") REFERENCES "role"("role_id") ON DELETE CASCADE ON UPDATE CASCADE`);
        await queryRunner.query(`ALTER TABLE "user_role" ADD CONSTRAINT "FK_d0e5815877f7395a198a4cb0a46" FOREIGN KEY ("user_id") REFERENCES "user"("user_id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
    }

    public async down(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`ALTER TABLE "user_role" DROP CONSTRAINT "FK_d0e5815877f7395a198a4cb0a46"`);
        await queryRunner.query(`ALTER TABLE "user_role" DROP CONSTRAINT "FK_32a6fc2fcb019d8e3a8ace0f55f"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_d0e5815877f7395a198a4cb0a4"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_32a6fc2fcb019d8e3a8ace0f55"`);
        await queryRunner.query(`DROP TABLE "user_role"`);
        await queryRunner.query(`DROP TABLE "user_session"`);
        await queryRunner.query(`DROP TABLE "role"`);
        await queryRunner.query(`DROP TABLE "user"`);
        await queryRunner.query(`DROP TABLE "role_feature"`);
        await queryRunner.query(`DROP TABLE "item_category"`);
        await queryRunner.query(`DROP TABLE "feature"`);
        await queryRunner.query(`DROP TABLE "feature_group"`);
    }

}
